{
    "name": "ConfigUtility",
    "path": "ConfigUtility",
    "type": 1,
    "parent": null,
    "childern": [
        {
            "name": "Editor",
            "path": "ConfigUtility/Editor",
            "type": 1,
            "parent": "ConfigUtility",
            "childern": [
                {
                    "name": "Jsons",
                    "path": "ConfigUtility/Editor/Jsons",
                    "type": 1,
                    "parent": "Editor",
                    "childern": [],
                    "content": ""
                },
                {
                    "name": "PersistentData",
                    "path": "ConfigUtility/Editor/PersistentData",
                    "type": 1,
                    "parent": "Editor",
                    "childern": [
                        {
                            "name": "SOPersistentData.cs",
                            "path": "ConfigUtility/Editor/PersistentData/SOPersistentData.cs",
                            "type": 0,
                            "parent": "PersistentData",
                            "childern": [],
                            "content": "public class SOPersistentData\n{\n    public string path;\n    public long lastGenerationTime;\n}"
                        }
                    ],
                    "content": ""
                },
                {
                    "name": "SODirConfig.cs",
                    "path": "ConfigUtility/Editor/SODirConfig.cs",
                    "type": 0,
                    "parent": "Editor",
                    "childern": [],
                    "content": "/*\n * This config file is generated by python code, if you don't know what it means, don't change it.\n */\npublic static class SODirConfig\n{\n    public readonly static string jsonUnityDir = \"$jsonUnityDir$\";\n    public readonly static string persistentDataUnityPath = \"$persistentDataUnityPath$\";\n}"
                },
                {
                    "name": "SOGenerator.cs",
                    "path": "ConfigUtility/Editor/SOGenerator.cs",
                    "type": 0,
                    "parent": "Editor",
                    "childern": [],
                    "content": "using Newtonsoft.Json;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\nusing UnityEditor;\nusing UnityEngine;\n\npublic static class SOGenerator\n{\n    private static Dictionary<string, SOPersistentData> _pathDataDic = null;\n    private static Dictionary<string, SOPersistentData> PathDataDic\n    {\n        get\n        {\n            if (_pathDataDic == null)\n            {\n                if (!File.Exists(SODirConfig.persistentDataUnityPath))\n                {\n                    _pathDataDic = new Dictionary<string, SOPersistentData>();\n                }\n                else\n                {\n                    using (StreamReader sr = new StreamReader(SODirConfig.persistentDataUnityPath))\n                    {\n                        _pathDataDic = JsonConvert.DeserializeObject<Dictionary<string, SOPersistentData>>(sr.ReadToEnd());\n                    }\n                }\n            }\n            return _pathDataDic;\n        }\n    }\n\n    [MenuItem(\"SOGenerator/UpdateSO\")]\n    public static void GenSOOnDemand()\n    {\n        var jsonFiles = Directory.GetFiles(SODirConfig.jsonUnityDir, \"*.json\");\n        List<string> excludeJsonFiles = new List<string>();\n        foreach (var f in jsonFiles)\n        {\n            var ff = f.Replace(@\"\\\", @\"/\");\n            if (PathDataDic.ContainsKey(ff) && PathDataDic[ff].lastGenerationTime > File.GetLastWriteTimeUtc(f).Ticks)\n            {\n                excludeJsonFiles.Add(ff);\n            }\n        }\n        Debug.Log($\"Exclude files: {string.Join(\",\", excludeJsonFiles)}\");\n\n        GenSO(excludeJsonFiles);\n    }\n\n    [MenuItem(\"SOGenerator/GenAllSO\")]\n    public static void GenAllSO()\n    {\n        GenSO();\n    }\n\n    private static void GenSO(List<string> excludeJsonFile = null)\n    {\n        bool changed = false;\n        Assembly asm = Assembly.Load(\"Assembly-CSharp\");\n        foreach (var t in asm.GetTypes())\n        {\n            var a = t.GetCustomAttribute<SOGenConfigAttribute>(true);\n            if (a == null)\n            {\n                continue;\n            }\n            if (excludeJsonFile != null && excludeJsonFile.Contains(a.jsonUnityPath))\n            {\n                continue;\n            }\n            GenSO(a.jsonUnityPath, a.soInstanceUnityPath, a.dataType, t);\n            Debug.Log($\"Generate so using {a.jsonUnityPath}\");\n\n            PathDataDic[a.jsonUnityPath] = new SOPersistentData\n            {\n                lastGenerationTime = DateTime.UtcNow.Ticks,\n                path = a.jsonUnityPath\n            };\n            changed = true;\n        }\n\n        if (changed == true)\n        {\n            using (StreamWriter sw = new StreamWriter(SODirConfig.persistentDataUnityPath))\n            {\n                sw.Write(JsonConvert.SerializeObject(PathDataDic));\n            }\n        }\n    }\n\n    private static void GenSO(string jsonPath, string soPath, Type dataType, Type soType)\n    {\n        var t = typeof(List<>).MakeGenericType(dataType);\n        object data = null;\n        using (StreamReader sr = new StreamReader(jsonPath))\n        {\n            var setting = new JsonSerializerSettings();\n            setting.NullValueHandling = NullValueHandling.Ignore;\n            data = JsonConvert.DeserializeObject(sr.ReadToEnd(), t, setting);\n        }\n\n        foreach (var a in (IEnumerable)data)\n        {\n            var md = dataType.GetMethod(\"ProcessUnityAssets\", BindingFlags.NonPublic | BindingFlags.Instance);\n            md.Invoke(a, null);\n        }\n\n        UnityEngine.Object so;\n        if (File.Exists(soPath))\n        {\n            so = AssetDatabase.LoadMainAssetAtPath(soPath);\n        }\n        else\n        {\n            so = ScriptableObject.CreateInstance(soType);\n            AssetDatabase.CreateAsset(so, soPath);\n            AssetDatabase.SaveAssets();\n        }\n        var f = soType.GetField(\"_data\");\n        f.SetValue(so, data);\n\n        EditorUtility.SetDirty(so);\n    }\n\n    private static void GenSO<DataT, SoT>(string jsonPath, string soPath) where SoT : SOBase<DataT>\n    {\n        GenSO(jsonPath, soPath, typeof(DataT), typeof(SoT));\n    }\n\n}\n"
                }
            ],
            "content": ""
        },
        {
            "name": "Runtime",
            "path": "ConfigUtility/Runtime",
            "type": 1,
            "parent": "ConfigUtility",
            "childern": [
                {
                    "name": "Data",
                    "path": "ConfigUtility/Runtime/Data",
                    "type": 1,
                    "parent": "Runtime",
                    "childern": [
                        {
                            "name": "__ConfigTestType.cs",
                            "path": "ConfigUtility/Runtime/Data/__ConfigTestType.cs",
                            "type": 0,
                            "parent": "Data",
                            "childern": [],
                            "content": "using System;\nusing UnityEditor;\nusing UnityEngine;\n\n[Serializable]\npublic class __ConfigTestType\n{\n//$Field_S$//\n\n    private void ProcessUnityAssets()\n    {\n    //$Process_S$//\n    }\n}\n"
                        }
                    ],
                    "content": ""
                },
                {
                    "name": "Resources",
                    "path": "ConfigUtility/Runtime/Resources",
                    "type": 1,
                    "parent": "Runtime",
                    "childern": [
                        {
                            "name": "Configs",
                            "path": "ConfigUtility/Runtime/Resources/Configs",
                            "type": 1,
                            "parent": "Resources",
                            "childern": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "name": "SO",
                    "path": "ConfigUtility/Runtime/SO",
                    "type": 1,
                    "parent": "Runtime",
                    "childern": [
                        {
                            "name": "__SOTemplate.cs",
                            "path": "ConfigUtility/Runtime/SO/__SOTemplate.cs",
                            "type": 0,
                            "parent": "SO",
                            "childern": [],
                            "content": "[SOGenConfig(dataType = typeof(__ConfigTestType),\n    jsonUnityPath = @\"$jsonUnityPath$\",\n    soInstanceUnityPath = @\"$soInstanceUnityPath$\")]\npublic class __SOTemplate : SOBase<__ConfigTestType>\n{\n\n}\n"
                        }
                    ],
                    "content": ""
                },
                {
                    "name": "SOBase.cs",
                    "path": "ConfigUtility/Runtime/SOBase.cs",
                    "type": 0,
                    "parent": "Runtime",
                    "childern": [],
                    "content": "using System.Collections.Generic;\nusing UnityEngine;\n\npublic abstract class SOBase<T> : ScriptableObject\n{\n    public List<T> _data;\n\n}\n"
                },
                {
                    "name": "SOGenConfigAttribute.cs",
                    "path": "ConfigUtility/Runtime/SOGenConfigAttribute.cs",
                    "type": 0,
                    "parent": "Runtime",
                    "childern": [],
                    "content": "using System;\n\npublic class SOGenConfigAttribute : Attribute\n{\n    public string jsonUnityPath;\n    public string soInstanceUnityPath;\n    public Type dataType;    \n}\n"
                }
            ],
            "content": ""
        }
    ],
    "content": ""
}